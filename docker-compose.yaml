version: '3.10'

services:
  portainer:
    image: portainer/portainer-ce:latest
    container_name: portainer
    restart: unless-stopped
    security_opt:
       - no-new-privileges:true
    volumes:
       - /etc/localtime:/etc/localtime:ro
       - /var/run/docker.sock:/var/run/docker.sock:ro
       - ./portainer-data:/data
    ports:
     - 9443:9443
     - 8000:8000

  
  zookeeper:
    image: wurstmeister/zookeeper
    container_name: zookeeper
    ports:
      - "2181:2181"
    restart: unless-stopped
    networks:
      - uit-news-verification

  kafka:
    image: wurstmeister/kafka
    container_name: kafka
    ports:
      - "9092:9092"  # Port for PLAINTEXT listener
      - "9093:9093"  # Port for PLAINTEXT_HOST listener
    environment:
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: PLAINTEXT://:9092,PLAINTEXT_HOST://:9093
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:9093
    restart: unless-stopped
    depends_on:
      - zookeeper
    networks:
      - uit-news-verification

  db:
    image: mysql:latest
    container_name: mysql
    restart: unless-stopped
    environment:
      - MYSQL_ROOT_PASSWORD=uit-news
      - MYSQL_DATABASE=verification
    ports:
      - "3306:3306"
    networks:
      - uit-news-verification

  training:
    image: training
    container_name: training
    build:
      context: ./domains/training
      target: dev
    volumes:
      - './domains/training/:/src'
    ports:
      - '4004:3000'
    depends_on:
      - kafka
      # - db
    restart: always
    networks:
      - uit-news-verification

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    ports:
      - 8080:8080
    environment:
      - KAFKA_CLUSTERS_0_NAME=local
      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=kafka:9092
    depends_on:
      - kafka
    restart: always
    networks:
      - uit-news-verification

  # hadoop:
  #   image: sequenceiq/hadoop-docker:2.7.1
  #   container_name: hadoop
  #   ports:
  #     - '50070:50070'  # Web UI port
  #     - '9000:9000'    # HDFS port
  #   networks:
  #     - uit-news-verification

  get_news:
    image: get_news
    container_name: get_news
    build:
      context: ./domains/Get_News
      target: dev
    volumes:
      - './domains/Get_News/:/src'
    ports:
      - '4003:3000'
    depends_on:
      - kafka
      - db
      # - hadoop
    restart: always
    networks:
      - uit-news-verification

  news_crawler:
    build:
      context: ./domains/news_crawler
      dockerfile: Dockerfile
    container_name: news_crawler
    ports:
      - "8080:80"
    volumes:
      - ./domains/news_crawler:/app
    command: ["cron", "-f"]
    restart: always
    networks:
      - uit-news-verification

networks:
  uit-news-verification:
    name: uit-news-verification
